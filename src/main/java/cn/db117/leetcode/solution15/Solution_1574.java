// 给你一个整数数组 arr ，请你删除一个子数组（可以为空），使得 arr 中剩下的元素是 非递减 的。
//
// 一个子数组指的是原数组中连续的一个子序列。 
//
// 请你返回满足题目要求的最短子数组的长度。 
//
// 
//
// 示例 1： 
//
// 
//输入：arr = [1,2,3,10,4,2,3,5]
//输出：3
//解释：我们需要删除的最短子数组是 [10,4,2] ，长度为 3 。剩余元素形成非递减数组 [1,2,3,3,5] 。
//另一个正确的解为删除子数组 [3,10,4] 。 
//
// 示例 2： 
//
// 
//输入：arr = [5,4,3,2,1]
//输出：4
//解释：由于数组是严格递减的，我们只能保留一个元素。所以我们需要删除长度为 4 的子数组，要么删除 [5,4,3,2]，要么删除 [4,3,2,1]。
// 
//
// 示例 3： 
//
// 
//输入：arr = [1,2,3]
//输出：0
//解释：数组已经是非递减的了，我们不需要删除任何元素。
// 
//
// 示例 4： 
//
// 
//输入：arr = [1]
//输出：0
// 
//
// 
//
// 提示： 
//
// 
// 1 <= arr.length <= 10^5 
// 0 <= arr[i] <= 10^9 
// 
// Related Topics 栈 数组 双指针 二分查找 单调栈 
// 👍 48 👎 0


package cn.db117.leetcode.solution15;

/**
 * 1574.删除最短的子数组使剩余数组有序.shortest-subarray-to-be-removed-to-make-array-sorted
 *
 * @author db117
 * @since 2021-07-20 14:42:26
 **/

public class Solution_1574 {
    public static void main(String[] args) {
        Solution solution = new Solution_1574().new Solution();

        System.out.println(solution.findLengthOfShortestSubarray(new int[]{
                1, 2, 3, 10, 4, 2, 3, 5
        }));
        System.out.println(solution.findLengthOfShortestSubarray(new int[]{
                5, 4, 3, 2, 1
        }));
        System.out.println(solution.findLengthOfShortestSubarray(new int[]{
                1, 2, 3
        }));
        System.out.println(solution.findLengthOfShortestSubarray(new int[]{
                1
        }));
        System.out.println(solution.findLengthOfShortestSubarray(new int[]{
                1, 2, 3, 10, 0, 7, 8, 9
        }));// 2
        System.out.println(solution.findLengthOfShortestSubarray(new int[]{
                6, 3, 10, 11, 15, 20, 13, 3, 18, 12
        }));// 8
        System.out.println(solution.findLengthOfShortestSubarray(new int[]{

        }));// 928
    }

    //leetcode submit region begin(Prohibit modification and deletion)
    class Solution {
        public int findLengthOfShortestSubarray(int[] arr) {
            // 先找左边非递减
            int left = 0;
            while (left + 1 < arr.length && arr[left + 1] >= arr[left]) {
                left++;
            }
            if (left == arr.length - 1) {
                // 全部非递减
                return 0;
            }

            // 再找右边非递减
            int right = arr.length - 1;
            while (right - 1 > 0 && arr[right - 1] <= arr[right]) {
                right--;
            }

            // 合并
            if (arr[left] <= arr[right]) {
                // 两边数组没有冲突
                return right - left - 1;
            }

            // 需要解决冲突
            // 保留最长的数组
            int ans = Math.min(right, arr.length - left - 1);

            int leftMax = left;
            left = 0;
            // 固定右边界，尽量缩小左边界
            while (left <= leftMax && right < arr.length) {
                if (arr[left] <= arr[right]) {
                    // 符合题意找最值
                    ans = Math.min(ans, right - left - 1);
                    // 移动左边界
                    left++;
                } else {
                    // 移动有边界
                    right++;
                }
            }
            return ans;
        }
    }
//leetcode submit region end(Prohibit modification and deletion)

}